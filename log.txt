
mer 30 ago 2017, 18.31.06, CEST
Converting MixGauss.m file:
	- solved the problem of converting from matrix to array
		- used squeeze(asarray(x))
	- current problems with appending matrices
		- one suggestion is to use c_ and r_ but is not encouraged
		- looking into append
	- also the empty matrix X
		- because when I currently append Xi to it, it keeps the zeros in the 
		X matrix and then puts Xi
	- should run the two for loops and then check what Xi is holding
	- one idea would be to create a temporary matrix which holds the Xi from the
	first run of for loop, then append the next Xi created to it. 

Now will create a github repo from the current folder.
----------------------------------------

sab  2 set 2017, 14.48.17, CEST
Github is setup

- Using concatenate now
	- concatenates two predefined matrices
	- should find how to concatenate an empty matrix to a new matrix
	- also should find how to create an empty matrix without mentioning its size
	beforehand
----------------------------------------

lun  4 set 2017, 15.25.41, CEST
Tried with removing X from the loop and just concatenated Xi with Xi.

Seems to be working for now.

Should check the values with matlab values.

Checked the corresponding values, for eg. the array at position 0 and pos 100.
Turns out they are same. Should create something to hold the old values.
----------------------------------------

mar  5 set 2017, 19.03.19, CEST
Trying to reference the index from 0 to 99 for the first set of Xi, then for the
second set will reference 100 to 199.

----------------------------------------

mer  6 set 2017, 23.15.50, CEST
Was able to solve the problem of appending X. Had to declare as empty lists 
first. -> Then when the list was done with two arrays, had to convert it into 
an array. 

There is a still a problem of an array containing two independent arrays, which
gives the shape like(2, 100, 2) instead of (200, 2). 
	- For now I'm not able to solve this problem.

Proceeded with plotting the data.
	- In the first try it got plotted, but the scatter plot seemed too 
	classified already. There were two distinct groups of data instead of some
	mixed data like in matlab.
	- Tried to run it again, but now there's some error. Should check if I made
	any changes by mistake. Or should restart the kernel.
	- I remember I tried to remove the array(X). After that it's messed up now.

----------------------------------------

ven  8 set 2017, 23.21.54, CEST

Solved last problem by using X = concatenate(X, axis=0)

----------------------------------------

sab  9 set 2017, 18.04.43, CEST

Will create a new function now, PCA. 
Should contact someone to send me the lab scripts: maybe eloise
----------------------------------------

dom 10 set 2017, 12.09.25, CEST

Received the lab scripts from Eloise. Will compare with them after everything is
done.

Made a change in generating random matrix.
	- Earlier was using random.rand which was giving uniformly distributed 
	values.
	- Now made the switch to random.randn for normally distributed values.

(Should look into these two distributions to make it clear)

Now I have to find how to append columns to a matrix.
	- maybe can use concatenate with a different axis value.
	- rough work suggests I just have to change axis to 1 to append columns.

Should also look how to use "hold on" in python.

Will check how to use PCA:
	- should check eloise's script
	- need meld first

Current Problem:
[V, D] = eigs(X' * X/n, k);
	
	- doing this in python
	- found linalg.eig in python, which takes only one argument.

	- there's eigh for a hermitian matrix:
		- hermitian matrix is when you take the transpose of the matrix and then
		take complex conjugates (i.e. magnitude of the no. is same but the sign 
		of the complex part is reversed; eg: 1 + i --> 1 - i)
		- then they turn out to be the same matrix

	- symmetric matrix is when the transpose and the original matrix are the 
	same.
----------------------------------------

lun 11 set 2017, 15.00.55, CEST

To check for NaN elements in an array:
	- isnan(array)

Will worry about 3d plot later.
Now the problem is to find the k eigen values, first I can try to use the 
regular eig and compare the values.

Should check how the mathematical operations ordering is carried out in matlab.

Multiplication (.*), right division (./), left division (.\), matrix 
multiplication (*), matrix right division (/), matrix left division (\)
----------------------------------------

mar 12 set 2017, 18.51.28, CEST

There's been some progression regarding last problem. 
Had to import scipy.sparse.linalg properly to make eigs work properly.

But in case of python, the return of eigs is reversed compared to Matlab.
	- V is D and D is V.
	- Also there is no need to use diag as the return is already an array of 
	diagonal elements.

Current Problem is in sorting: 
	- the sort function is not returning the indices.
	- its putting the two numbers in the two outputs to the function.
	
	Suggested Solution:
		- argsort() in numpy
----------------------------------------

mer 13 set 2017, 06.31.27, CEST

argsort() seems to be useful to only find the indices of the sorted array.

Will have to run two lines
	- one to sort the array in descending order
	- another to get the indices
----------------------------------------

ven 15 set 2017, 23.13.39, CEST

variable.sort() sorts the array and saves it in place of variable.
	- no need to assign it back to variable.
	- variable[::-1].sort()

Now, there is a problem with 3d plot. 

But we must focus on the remaining 3 functions before getting stuck with the 
plots.
----------------------------------------

sab 16 set 2017, 11.29.39, CEST

Now, working on the OmatchingPursuit function:
	- transpose of a matrix is given matrix.T
	- powers are raised by ** instead of ^

OMatchingPursuit seems to be done. 
	- might run into further errors when testing.

For now we switch to holdoutCVOMP
	- is one of the longest

There is still the problem with ranges bothering me.
	- as the index starts with 1 in matlab and 0 in python,
	I should always make sure whether when using range I'll be indexing a matrix
		- if yes, then use just range(number)

For now all the functions have been completed.

There was a problem with two calcErr functions, but it turns out both return 
the same answer.

I guess now I should start running the script.
	- First arrange all the functions on top and remove the extra garbage.

The graph for scatter(1:D, abs(V(:,1))) is not replicating properly.

There is a problem with PCA. 
	- The return on V is too big.
----------------------------------------

dom 17 set 2017, 09.36.21, CEST
Will start with the 3d scatter problem.
	- The problem seems similar to what I had before with the regular scatter.
	- Restarted the kernel but still it's not solved.

----------------------------------------

lun 18 set 2017, 23.05.20, CEST
Got the graph, I was looking for, but this is for w not for V, which I was 
hoping for.
	- Anyway it changes if I run it one more time.

Had to convert ntr to int to solve the problem with holdoutCVOMP.

----------------------------------------

mar 19 set 2017, 22.08.34, CEST

There are a few more lines to be run. After that, it'll be mostly correcting the
graphs.

There are some problems with Vm in holdoutCVOMP. Should cross check the outputs 
with the matlab file.
----------------------------------------

gio 21 set 2017, 00.15.56, CEST
Solved the problem with the plot title. 

For the 3d plot, I have checked that the normal syntax works.
	- There is some problem with the data points
	- Tried converting the complex numbers to real numbers.
		- didn't solve it.
	- Should check what are the values in the matlab script.
	- Right now my numbers are e-2 to e-3.
		- I feel it has something to do with that.
	- Or maybe it could be because of the negative numbers.
----------------------------------------

sab 23 set 2017, 07.20.06, CEST
Working from Lyon Gare.

Checking the size of all the three arrays for 3d scatter plot.

Finally able to solve the 3D scatter plot problem.

Had to:
	from matplotlib import pyplot
	from mpl_toolkits.mplot3d import Axes3D
	ax = Axes3D(fig)
	fig = pyplot.figure()
	pyplot.show()

These were the changes made to the existing code.

Now, there's some problem remaining in holdoutCVOMP

	- It might be due to nonzero function.
		- In python it is returning the indices of the nonzero elements
		NOT the nonzero elements themselves.
		- In matlab nonzero finds the nonzero elements themselves.

	- As it turns out, in matlab function we are using find, which actually 
	returns the indices of non zero elements.

Problem in OMatchingPursuit:
	- the function doesn't work with T = 1
		- it should return w = zeros((D,1))
		- but fails to return anything
		- we can use try and except
			- with except maybe we return w, r and I as it is.

	- This problem has been solved too. Added one more line of row = row[0]
----------------------------------------

mer 27 set 2017, 23.44.52, CEST

Adding the finishing touches.

Changing all the imported functions of numpy to as np.

importing everything from numpy makes the program slow.
	- the interpreter has to go through all the namespaces and find the right 
	one.
	- basically, the namespace of numpy replaces all the other functions with 
	the same names.
----------------------------------------

gio 28 set 2017, 23.50.03, CEST

New file mlccLab3 created.

All the functions changed from regular namespace to np.namespace.

First part of lab3 html file done in jupyter markup.

Should submit module, notebook for following and the test notebook.
	- In addition with a README with explanation of all files.


